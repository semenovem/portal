version: '3'

networks:
  dev-net-portal:
    external: true

x-service: &net
  networks:
    - dev-net-portal
  restart: on-failure

volumes:
  postgres:
  redis:
  s3storage:


services:
  postgres:
    <<: *net
    # собрать в dockers
    image: postgres:15.3
    #    image: postgres:15.3.ru
    hostname: db-core
    command: -p 5432
    volumes:
      - postgres:/var/lib/postgresql/data:rw
      - ./configs/pg-initdb:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: ${__DB_CORE_NAME__}
      POSTGRES_USER: ${__DB_CORE_USER__}
      POSTGRES_PASSWORD: ${__DB_CORE_PASSWORD__}
      #      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums --locale=ru_RU.UTF-8"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
      POSTGRES_HOST_AUTH_METHOD: trust
      #      TZ: Europe/Volgograd
      TZ: UTC
    ports:
      - ${__DB_CORE_PORT_EXPOSE__}:5432
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 300M


  redis:
    <<: *net
    image: redis:7.0.12
    hostname: db-ram
    command: --port 6379
    ports:
      - ${__DB_RAM_PORT_EXPOSE__}:6379
    volumes:
      - redis:/data:rw
    environment:
      TZ: UTC
    entrypoint: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 100M
        reservations:
          cpus: '0.5'
          memory: 10M


  redis-gui:
    <<: *net
    #    container_name: redis-cmd
    #    hostname: redis-commander
    command: /usr/bin/dumb-init -- /redis-commander/docker/entrypoint.sh -p ${__DB_RAM_GUI_PORT_EXPOSE__}
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - NO_SAVE=true
      - NO_LOG_DATA=true
    ports:
      - "${__DB_RAM_GUI_PORT_EXPOSE__}:${__DB_RAM_GUI_PORT_EXPOSE__}"
    volumes:
      - ./configs/redis-config.json:/redis-commander/config/local.json:ro
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
        reservations:
          cpus: '0.01'
          memory: 30M
    logging:
      driver: none


  s3:
    <<: *net
    image: quay.io/minio/minio:RELEASE.2023-08-16T20-17-30Z
    hostname: s3storage
    command: server /data --console-address :9001 --certs-dir /certs
    ports:
      - ${__S3_GUI_PORT_EXPOSE__}:9001
    environment:
      MINIO_ROOT_USER: ${__S3_ACCESS_KEY__}
      MINIO_ROOT_PASSWORD: ${__S3_SECRET_KEY__}
      MINIO_VOLUMES: /data
    volumes:
      - s3storage:/data
      - ./configs/s3/private.key:/certs/private.key:ro
      - ./configs/s3/public.crt:/certs/public.crt:ro
    deploy:
      replicas: 1


  s3-gui:
    <<: *net
    image: ${__DOCKER_S3_GUI_MC_IMAGE__}
    command: /bin/sh /home/minio/create-bucket.sh
    environment:
      S3_API_URL: ${__S3_URL__}
      S3_ACCESS_KEY: ${__S3_ACCESS_KEY__}
      S3_SECRET_KEY: ${__S3_SECRET_KEY__}
    volumes:
      - ./configs/s3/create-bucket.sh:/home/minio/create-bucket.sh:ro
    depends_on:
      - s3
    deploy:
      replicas: 0



  swagger:
    <<: *net
    image: swaggerapi/swagger-ui:v5.4.2
    ports:
      - ${__SWAGGER_PORT_EXPOSE__}:8080
    environment:
      URLS: '[{url: "/api-portal.yaml", name: "api-portal"}]'
      DOC_EXPANSION: none
    volumes:
      - ../../docs/swagger.yaml:/usr/share/nginx/html/api-portal.yaml:ro
    logging:
      driver: none
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.05'
          memory: 30M
        reservations:
          cpus: '0.001'
          memory: 10M

  # --------------------------------------------------------------------------------
  # --------------------------------------------------------------------------------
  # --------------------------------------------------------------------------------

#  /var/lib/clickhouse/ - main folder where ClickHouse stores the data
#  /var/log/clickhouse-server/ - logs
#  docker run -d \
#  -v $(realpath ./ch_data):/var/lib/clickhouse/ \
#  -v $(realpath ./ch_logs):/var/log/clickhouse-server/ \
#  --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server
#You may also want to mount:
#
#  /etc/clickhouse-server/config.d/*.xml - files with server configuration adjustmenets
#  /etc/clickhouse-server/users.d/*.xml - files with user settings adjustmenets
#  /docker-entrypoint-initdb.d/ - folder with database initialization scripts (see below).



# GUI https://github.com/tabixio/tabix

  clickhouse:
    <<: *net
    image: clickhouse/clickhouse-server:23.3.9-alpine
    hostname: clickhouse.docker
    ports:
      - "5140:8123"
#      - "5141:9000/tcp"
    environment:
      CLICKHOUSE_DB: my_database
      CLICKHOUSE_USER: username
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: password
#    volumes:
#      - ../../docs/swagger.yaml:/usr/share/nginx/html/api-portal.yaml:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 300M
      replicas: 0

  clickhouse-gui:
    <<: *net
    image: ${__DOCKER_CLICKHOUSE_GUI_TABIX_IMAGE__}
    ports:
      - "5141:80/tcp"
#    environment:
#      CLICKHOUSE_DB: my_database
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
      replicas: 0
